sampleCenteredZ <- max(sampleXYZ[,3])-((max(sampleXYZ[,3])-min(sampleXYZ[,3]))/2)
sampleCenteredXYZ <- rbind(sampleCenteredXYZ, c(sampleCenteredX,sampleCenteredY,sampleCenteredZ))
}
return(sampleCenteredXYZ)
}
pairwiseDist2pointsXYZ <- function(p1, p2, adj){#p1 and p2 are both vectors, in which [1] is x, [2] is y, and [3] is z
return(sqrt( ((adj$x*(p2[1]-p1[1]))^2) + ((adj$y*(p2[2]-p1[2]))^2) + ((adj$z*(p2[3]-p1[3]))^2) ))
}
calcSamplePairwiseDistances <- function(samplePoints, adj){
toReturn <- c()
for(i in 1:dim(sampleCenters)[1]){
forSample <- c()
for(j in 1:dim(sampleCenters)[1]){
forSample <- append(forSample, pairwiseDist2pointsXYZ(sampleCenters[i,],sampleCenters[j,], adj))
}
toReturn <- rbind(toReturn, forSample)
}
return(toReturn)
}
calcMinDistances <- function(samplePoints, peripheryPoints, adj){
minDistAllSamples <- c()
minPointAllSamples <- c()
for (s in 1:dim(samplePoints)[1]){
print(s)
distances <- c()
for (p in 1:dim(peripheryPoints)[1]){
d <- pairwiseDist2pointsXYZ(samplePoints[s,], peripheryPoints[p,], adj)
distances <- append(distances, d)
}
distances <- distances %>% unlist
minDistAllSamples <- append(minDistAllSamples, min(distances))
minPointAllSamples <- rbind(minPointAllSamples, peripheryPoints[which(distances==min(distances))[1],])#there may be >1 point that is the min, this will just take the first
}
minPointAllSamples <- as.data.frame(minPointAllSamples)
colnames(minPointAllSamples) <- c('x','y','z')
output <- list('distances' = minDistAllSamples, 'XYZ' = minPointAllSamples )
return(output)
}
plotDistanceSegments <- function(periphCoord, sampleCoord){
x <- c()
y <- c()
z <- c()
for (i in 1:dim(periphCoord)[1]){
x <- cbind(x, c(sampleCoord[i,1], periphCoord[i,1]))
y <- cbind(y, c(sampleCoord[i,2], periphCoord[i,2]))
z <- cbind(z, c(sampleCoord[i,3], periphCoord[i,3]))
}
segments3d(x=x, y=y, z=z, col='red')
points3d(x=x[2,], y=y[2,], z=z[2,], cex=2, col='red')
}
plotDistanceSegmentsCentroid <- function(centroid, sampleCoord){
x <- c()
y <- c()
z <- c()
for (i in 1:dim(sampleCoord)[1]){
x <- cbind(x, c(sampleCoord[i,1], centroid[1]))
y <- cbind(y, c(sampleCoord[i,2], centroid[2]))
z <- cbind(z, c(sampleCoord[i,3], centroid[3]))
}
segments3d(x=x, y=y, z=z, col='red')
}
correctOrientation <-function(a){#does an x and then y axis reflection
#on a 3D array [x,y,z] of imaging data
for (z in seq_len(dim(a)[3])){
for (y in seq_len(dim(a)[2])){
a[,y,z] <- rev(a[,y,z])
}
}
return(a)
}
defineCentroid <- function(peripheryPoints){
x <- mean(peripheryPoints$x)
y <- mean(peripheryPoints$y)
z <- mean(peripheryPoints$z)
return(c(x,y,z))
}
calcDistancesCentroid <- function(samplePoints, centroid, adj){
distAllSamples <- c()
for (s in 1:dim(samplePoints)[1]){
print(s)
d <- pairwiseDist2pointsXYZ(samplePoints[s,], centroid, adj)
distAllSamples <- append(distAllSamples, d)
}
return(distAllSamples)
}
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient481'
sf <- "sf12209"
tumorPrefix <- "Recurrence-v"
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
modelsPath <- paste0(dataPath, '/3Dmodels/',patientID,'/',sf)
# Retreive sample model files
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="sample*"))
# Create names object
names <- gsub('.rds','',gsub('sample','',sampleModelFiles))
# Also generate a longer names object that will match the exome sample identifier
sampleID_long <- paste0(tumorPrefix,names)
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name sample models object
names(sampleModels) <- names
# Set up default colors
colors <- rep('blue', length(sampleModels))
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# bring in adjustemnts (i.e. spacing for pixels) for patient
adj <- readRDS(paste0(modelsPath, '/adj.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel)
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name sample models object
names(sampleModels) <- names
# Set up default colors
colors <- rep('blue', length(sampleModels))
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# bring in adjustemnts (i.e. spacing for pixels) for patient
adj <- readRDS(paste0(modelsPath, '/adj.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel)
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="sample*"))
# Create names object
names <- gsub('.rds','',gsub('sample','',sampleModelFiles))
# Also generate a longer names object that will match the exome sample identifier
sampleID_long <- paste0(tumorPrefix,names)
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name sample models object
names(sampleModels) <- names
# Set up default colors
colors <- rep('blue', length(sampleModels))
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# bring in adjustemnts (i.e. spacing for pixels) for patient
adj <- readRDS(paste0(modelsPath, '/adj.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel)
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
# Plot samples
plot3dSamples(sampleModels, colors)
# Retreive sample model files
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="sample*"))
sampleModelFiles
# Retreive sample model files
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="^sample*"))
sampleModelFiles
# Retreive sample model files
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="^sample*"))
# Create names object
names <- gsub('.rds','',gsub('sample','',sampleModelFiles))
# Also generate a longer names object that will match the exome sample identifier
sampleID_long <- paste0(tumorPrefix,names)
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name sample models object
names(sampleModels) <- names
# Set up default colors
colors <- rep('blue', length(sampleModels))
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# bring in adjustemnts (i.e. spacing for pixels) for patient
adj <- readRDS(paste0(modelsPath, '/adj.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel)
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# View periphery
#contour3d(tumorPeriphery$mask, x=1:dim(tumorPeriphery$mask)[1], y=1:dim(tumorPeriphery$mask)[2], level=1, z=1:dim(tumorPeriphery$mask)[3], alpha = 1, add = TRUE, draw = TRUE, color = 'red')
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
# Plot samples
plot3dSamples(sampleModels, colors)
# Calc sample pairwise distances - used only to check, should always use official coordinates
samplePairwiseDistances <- calcSamplePairwiseDistances(sampleCenters, adj)
# Calculate avg distance from periphery
print(mean(samplePairwiseDistances))
# Calc min distance
minDistances <- calcMinDistances(sampleCenters, tumorPeriphery$XYZ, adj)
# Define centroid
tumorCentroid <- defineCentroid(tumorPeriphery$XYZ)
# View centroid
points3d(x=tumorCentroid[1], y=tumorCentroid[2], z=tumorCentroid[3], level=1, size=13, alpha = 1, add = TRUE, draw = TRUE, color = 'red')
# Calc distances from centroid
distancesCentroid <- calcDistancesCentroid(sampleCenters, tumorCentroid, adj)
# Plot segment between sample and closest tumor edge
plotDistanceSegments(minDistances$XYZ, sampleCenters)
# Plot segment between sample and centroid
plotDistanceSegmentsCentroid(tumorCentroid, sampleCenters)
# Calculate avg distance from periphery
print(mean(minDistances$distances))
# Create data frame for distance from periphery
distanceFromPeriphery <- data.frame(sampleID_long=sampleID_long, distance=minDistances$distances)
# Save distance from tumor periphery as R object
save(distanceFromPeriphery,file=paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromPeriphery.rda',sep=''))
# Save distance from tumor periphery as txt file
write.table(distanceFromPeriphery, file=paste0('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromPeriphery.txt'),sep='\t', row.names=F, quote=F)
# Calculate avg distance from centroid
print(mean(distancesCentroid))
# Create data frame for distance from centroid
distanceFromCentroid <- data.frame(sampleID_long=sampleID_long, distance=distancesCentroid)
# Save distance from centroid as R object
save(distanceFromCentroid,file=paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromCentroid.rda',sep=''))
# Save distance from tumor centoid as txt file
write.table(distanceFromCentroid, file=paste0('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromCentroid.txt'),sep='\t', row.names=F, quote=F)
patientID <- 'Patient485'
sf <- "sf12300"
tumorPrefix <- "Primary-v"
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
modelsPath <- paste0(dataPath, '/3Dmodels/',patientID,'/',sf)
# Retreive sample model files
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="^sample*"))
# Create names object
names <- gsub('.rds','',gsub('sample','',sampleModelFiles))
# Also generate a longer names object that will match the exome sample identifier
sampleID_long <- paste0(tumorPrefix,names)
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name sample models object
names(sampleModels) <- names
# Set up default colors
colors <- rep('blue', length(sampleModels))
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# bring in adjustemnts (i.e. spacing for pixels) for patient
adj <- readRDS(paste0(modelsPath, '/adj.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel)
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# View periphery
#contour3d(tumorPeriphery$mask, x=1:dim(tumorPeriphery$mask)[1], y=1:dim(tumorPeriphery$mask)[2], level=1, z=1:dim(tumorPeriphery$mask)[3], alpha = 1, add = TRUE, draw = TRUE, color = 'red')
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
# Plot samples
plot3dSamples(sampleModels, colors)
# Calc sample pairwise distances - used only to check, should always use official coordinates
samplePairwiseDistances <- calcSamplePairwiseDistances(sampleCenters, adj)
# Calculate avg distance from periphery
print(mean(samplePairwiseDistances))
# Calc min distance
minDistances <- calcMinDistances(sampleCenters, tumorPeriphery$XYZ, adj)
patientID <- 'Patient485'
sf <- "sf12300"
tumorPrefix <- "Primary-v"
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
modelsPath <- paste0(dataPath, '/3Dmodels/',patientID,'/',sf)
# Retreive sample model files
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="^sample*"))
# Create names object
names <- gsub('.rds','',gsub('sample','',sampleModelFiles))
# Also generate a longer names object that will match the exome sample identifier
sampleID_long <- paste0(tumorPrefix,names)
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name sample models object
names(sampleModels) <- names
# Set up default colors
colors <- rep('blue', length(sampleModels))
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# bring in adjustemnts (i.e. spacing for pixels) for patient
adj <- readRDS(paste0(modelsPath, '/adj.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel)
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# View periphery
#contour3d(tumorPeriphery$mask, x=1:dim(tumorPeriphery$mask)[1], y=1:dim(tumorPeriphery$mask)[2], level=1, z=1:dim(tumorPeriphery$mask)[3], alpha = 1, add = TRUE, draw = TRUE, color = 'red')
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
# Plot samples
plot3dSamples(sampleModels, colors)
# Calc sample pairwise distances - used only to check, should always use official coordinates
samplePairwiseDistances <- calcSamplePairwiseDistances(sampleCenters, adj)
# Calculate avg distance from periphery
print(mean(samplePairwiseDistances))
# Calc min distance
minDistances <- calcMinDistances(sampleCenters, tumorPeriphery$XYZ, adj)
# Define centroid
tumorCentroid <- defineCentroid(tumorPeriphery$XYZ)
# View centroid
points3d(x=tumorCentroid[1], y=tumorCentroid[2], z=tumorCentroid[3], level=1, size=13, alpha = 1, add = TRUE, draw = TRUE, color = 'red')
# Calc distances from centroid
distancesCentroid <- calcDistancesCentroid(sampleCenters, tumorCentroid, adj)
# Plot segment between sample and closest tumor edge
plotDistanceSegments(minDistances$XYZ, sampleCenters)
# Plot segment between sample and centroid
plotDistanceSegmentsCentroid(tumorCentroid, sampleCenters)
# Calculate avg distance from periphery
print(mean(minDistances$distances))
# Create data frame for distance from periphery
distanceFromPeriphery <- data.frame(sampleID_long=sampleID_long, distance=minDistances$distances)
# Save distance from tumor periphery as R object
save(distanceFromPeriphery,file=paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromPeriphery.rda',sep=''))
# Save distance from tumor periphery as txt file
write.table(distanceFromPeriphery, file=paste0('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromPeriphery.txt'),sep='\t', row.names=F, quote=F)
# Calculate avg distance from centroid
print(mean(distancesCentroid))
# Create data frame for distance from centroid
distanceFromCentroid <- data.frame(sampleID_long=sampleID_long, distance=distancesCentroid)
# Save distance from centroid as R object
save(distanceFromCentroid,file=paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromCentroid.rda',sep=''))
# Save distance from tumor centoid as txt file
write.table(distanceFromCentroid, file=paste0('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromCentroid.txt'),sep='\t', row.names=F, quote=F)
patientID <- 'Patient475'
sf <- "sf12180"
tumorPrefix <- "Primary-v"
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
modelsPath <- paste0(dataPath, '/3Dmodels/',patientID,'/',sf)
# Retreive sample model files
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="^sample*"))
# Create names object
names <- gsub('.rds','',gsub('sample','',sampleModelFiles))
# Also generate a longer names object that will match the exome sample identifier
sampleID_long <- paste0(tumorPrefix,names)
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name sample models object
names(sampleModels) <- names
# Set up default colors
colors <- rep('blue', length(sampleModels))
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# bring in adjustemnts (i.e. spacing for pixels) for patient
adj <- readRDS(paste0(modelsPath, '/adj.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel)
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# View periphery
#contour3d(tumorPeriphery$mask, x=1:dim(tumorPeriphery$mask)[1], y=1:dim(tumorPeriphery$mask)[2], level=1, z=1:dim(tumorPeriphery$mask)[3], alpha = 1, add = TRUE, draw = TRUE, color = 'red')
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
# Plot samples
plot3dSamples(sampleModels, colors)
# Calc sample pairwise distances - used only to check, should always use official coordinates
samplePairwiseDistances <- calcSamplePairwiseDistances(sampleCenters, adj)
# Calculate avg distance from periphery
print(mean(samplePairwiseDistances))
# Calc min distance
minDistances <- calcMinDistances(sampleCenters, tumorPeriphery$XYZ, adj)
# Define centroid
tumorCentroid <- defineCentroid(tumorPeriphery$XYZ)
# View centroid
points3d(x=tumorCentroid[1], y=tumorCentroid[2], z=tumorCentroid[3], level=1, size=13, alpha = 1, add = TRUE, draw = TRUE, color = 'red')
# Calc distances from centroid
distancesCentroid <- calcDistancesCentroid(sampleCenters, tumorCentroid, adj)
# Plot segment between sample and closest tumor edge
plotDistanceSegments(minDistances$XYZ, sampleCenters)
# Plot segment between sample and centroid
plotDistanceSegmentsCentroid(tumorCentroid, sampleCenters)
# Calculate avg distance from periphery
print(mean(minDistances$distances))
# Create data frame for distance from periphery
distanceFromPeriphery <- data.frame(sampleID_long=sampleID_long, distance=minDistances$distances)
# Save distance from tumor periphery as R object
save(distanceFromPeriphery,file=paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromPeriphery.rda',sep=''))
# Save distance from tumor periphery as txt file
write.table(distanceFromPeriphery, file=paste0('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromPeriphery.txt'),sep='\t', row.names=F, quote=F)
# Calculate avg distance from centroid
print(mean(distancesCentroid))
# Create data frame for distance from centroid
distanceFromCentroid <- data.frame(sampleID_long=sampleID_long, distance=distancesCentroid)
# Save distance from centroid as R object
save(distanceFromCentroid,file=paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromCentroid.rda',sep=''))
# Save distance from tumor centoid as txt file
write.table(distanceFromCentroid, file=paste0('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/Coordinates/DistanceFromCentroid.txt'),sep='\t', row.names=F, quote=F)
computeZscore <- function(cpmList){
zscores <- c()
mean <- mean(cpmList, na.rm=T)
sd <- sd(cpmList, na.rm=T)
for (i in cpmList){
z <- (i - mean)/sd
zscores <- append(zscores, z)
}
names(zscores) <- names(cpmList)
return(zscores)
}
pairwiseDist2pointsLPS <- function(p1, p2){#p1 and p2 are both vectors, in which [1] is x, [2] is y, and [3] is z
return(sqrt( ((p2[1]-p1[1])^2) + ((p2[2]-p1[2])^2) + (((p2[3]-p1[3]))^2) ))
}
computeMeanZscore <- function(cpmMatrix){
zscoreMatrix <- cpmMatrix
for (i in 1:nrow(cpmMatrix)){
unlisted <- cpmMatrix[i,] %>% unlist
zscoreMatrix[i,] <- computeZscore(unlisted)
}
zScoreMean <- colMeans(zscoreMatrix)
return(zScoreMean)
}
library(gtools)
library(gplots)
library(ggpmisc)
library(kableExtra)
library(dplyr)
# read in config file info
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
# User-defined variables and file paths (will also need to make sure VenteicherSignatures folder is in dataPath)
tag <- 'NA'
outfolder <- 'NA/'
cancerSEAResultsFile <- paste0(outputPath,'SID000017_generate_cancerSEA_dataset/cancerSEA_signature_zscores.txt')
oldhamDeconResultsFile <- paste0(dataPath,'filtered_module_eigenes_Bicor-None_signum0.514_minSize8_minMEcor0.85_16000.txt')
# Create an empty list to store type data
dataTypes <- list()
## Get sample metadata
# read in sample data file
data <- read.table(sampleDataFile, sep='\t', header = T, stringsAsFactors = F)
# read in patient + tumor data file
subtypedata <- read.table(patientTumorDataFile, sep='\t', header = T)
# merge by patient ID
merged <- merge(data, subtypedata, by="Patient")
# add in column to link patient info to RNAseq sampleID
rownames(merged) <- paste0(merged$Patient,merged$SampleName)
# specify purity metric to use
merged$purity <- merged$FACETS
merged[which(merged$PurityEstUsed == 'IDH'),]$purity <- 2*merged[which(merged$PurityEstUsed == 'IDH'),]$IDH1_VAF
# add data types to list
dataTypes[['relTumorDistance']] <- c('DistCentroid','DistPeriph')
dataTypes[['purity']] <- c('purity')
## read in cancerSEA file
dataCancerSEA <- read.table(cancerSEAResultsFile, sep='\t', header = T, row.names=1,stringsAsFactors = F)
dataTypes[['CancerSEA']] <- colnames(dataCancerSEA)
## read in Oldham lab data
dataOldhamDecon <- read.table(oldhamDeconResultsFile, sep='\t', header = T, row.names=1,stringsAsFactors = F)
conversion <- as.data.frame(rbind(c('lightcyan','lymphocytes'),
c('brown4','m1macro'),
c('brown','microgliamacro'),
c('palevioletred2','granulocyte'),
c('yellowgreen','endothelial'),
c('darkseagreen3','astrocytes'),
c('lavenderblush3','astrocytes2'),
c('black','oligodendrocytes'),
c('saddlebrown','ependymal'),
c('pink','neuron')), stringsAsFactors = F)
colnames(conversion) <- c('color','cellType')
colnames(dataOldhamDecon) <- conversion[match(colnames(dataOldhamDecon),conversion$color),]$cellType
dataTypes[['OldhamDecon']] <- colnames(dataOldhamDecon)
# merge these two datasets together
mtmp <- transform(merge(dataCancerSEA,dataOldhamDecon,by=0), row.names=Row.names, Row.names=NULL)
# add in metadata
mtmp <- transform(merge(mtmp, merged, by=0), row.names=Row.names, Row.names=NULL)
# apply conversions (transform purity and distance from periphery/centroid into z scores)
mtmp$zDistCentroid <- computeZscore(mtmp$DistCentroid)
mtmp$zWithinDistCentroid <- NA #same as above but within a patient
for (p in unique(mtmp$Patient)){
mtmp[which(mtmp$Patient == p),]$zWithinDistCentroid <- computeZscore(mtmp[which(mtmp$Patient == p),]$DistCentroid)
}
mtmp$zDistPeriph <- computeZscore(mtmp$DistPeriph)
mtmp$zWithinDistPeriph <- NA #same as above but within a patient
dataTypes[['zrelTumorDistance']] <- c('zDistCentroid','zDistPeriph')
dataTypes[['zWithinrelTumorDistance']] <- c('zWithinDistCentroid','zWithinDistPeriph')
for (p in unique(mtmp$Patient)){
mtmp[which(mtmp$Patient == p),]$zWithinDistPeriph <- computeZscore(mtmp[which(mtmp$Patient == p),]$DistPeriph)
}
mtmp$zPurity <- computeZscore(mtmp$purity)
dataTypes[['zPurity']] <- 'zPurity'
# subset for the data we are intersted in
ofInterest <- as.vector(dataTypes[c('zPurity','zrelTumorDistance','OldhamDecon','CancerSEA')] %>% unlist)
names(ofInterest) <- NULL
m <- as.matrix(mtmp[,ofInterest])
m <- m[complete.cases(m),] # remove nas
dim(m)
# view as heatmap
dist.pear <- function(x) as.dist(1-cor(t(x)))
m <- m[order(m[,'zDistCentroid']),]
#pdf(paste0(outputPath, outfolder,'allsigs_heatmap_with_distances.pdf'), width=20, height=40)
h <- heatmap.2(m,
trace="none",
dendrogram="column",
density.info="none",
cexCol=1,
Rowv=F,
scale='row',
col = my_palette)
# view as heatmap
my_palette <- colorRampPalette(c("blue","red"))(n = 299)
#pdf(paste0(outputPath, outfolder,'allsigs_heatmap_with_distances.pdf'), width=20, height=40)
h <- heatmap.2(m,
trace="none",
dendrogram="column",
density.info="none",
cexCol=1,
Rowv=F,
scale='row',
col = my_palette)
# view as heatmap
my_palette <- colorRampPalette(c("mediumblue", "grey", "orangered4"))(n = 299)
dist.pear <- function(x) as.dist(1-cor(t(x)))
m <- m[order(m[,'zDistCentroid']),]
#pdf(paste0(outputPath, outfolder,'allsigs_heatmap_with_distances.pdf'), width=20, height=40)
h <- heatmap.2(m,
trace="none",
dendrogram="column",
density.info="none",
cexCol=1,
Rowv=F,
scale='row',
col = my_palette)
