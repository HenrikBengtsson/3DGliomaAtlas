patientID <- 'Patient456'
sf <- "sf11904"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
source(paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/ConfigFiles/configImagingData.R',sep=''))
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient456'
sf <- "sf11904"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
source(paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/ConfigFiles/configImagingData.R',sep=''))
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient373'
sf <- "sf11048"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient413'
sf <- "sf11173"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient455'
sf <- "sf11901"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient452'
sf <- "sf11644"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient340'
sf <- "sf11055"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
tumorWorkUp <- function(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf){
source(paste('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Data/',patientID,'/ConfigFiles/configImagingData.R',sep=''))
setwd('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Projects/2016_LoglioExomeAnalysis/Tools/3DGliomaAtlas/data/models')#have to do this after running source because config automatically sets to patient's coordinates file [historical]
dir.create(patientID)
outputdir <- paste0(patientID,'/',sf)
dir.create(outputdir)
# Bring in subdirectories each containing a set of dicom files for a given sample; required to view samples; IMPORTANT: check that order is same as order of names and colors (either defined here or in config file) - if not, need to manually order sampleDicomsMainDir in config file
subdirectories <- mixedsort(list.dirs(sampleDicomsMainDir,recursive=FALSE))#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# set adjustments for all distance calculations (very important - do not skip and ensure all are same across all files for patient)
#adj <- setAdjustments(subdirectories, tumorDicoms)# check to make sure tumor and sample dimensions match!
# create tumor RDS
print ('Creating tumor rds file')
tumorTemplate <- readDICOM(tumorDicoms, recursive = TRUE, exclude = NULL, verbose = TRUE)
tumorTemplate <- dicom2nifti(tumorTemplate,datatype=4, mode="integer")
tumorTemplate@.Data <- correctOrientation(tumorTemplate@.Data)
tumorTemplate@.Data <- checkBinary(tumorTemplate@.Data)
saveRDS(tumorTemplate@.Data,file=paste0(outputdir, '/','tumor_t2.rds'))
# create sample RDSs
print ('Creating sample rds files')
for (i in 1:length(subdirectories)){
print(paste('Processing ',subdirectories[i],sep=''))
splitname <- strsplit(subdirectories[i],'/') %>% unlist
name <- splitname[length(splitname)]
print(name)
sampleDicom <- readDICOM(subdirectories[i], recursive = FALSE, exclude = NULL, verbose = TRUE)
sampleNifti <- dicom2nifti(sampleDicom,datatype=4, mode="integer")
sampleNifti@.Data <- correctOrientation(sampleNifti@.Data)
sampleNifti@.Data <- checkBinary(sampleNifti@.Data)
saveRDS(sampleNifti@.Data,file=paste0(outputdir, '/',name,'.rds'))
}
}
patientID
sf
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient450'
sf <- "sf11612"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient450'
sf <- "sf11612"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient303'
sf <- "sf10809"
tumorWorkUp(sampleDicomsMainDir,tumorDicoms, outputdir, patientID, sf)
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
modelsPath <- paste0(dataPath, '/3Dmodels/')
# Specify patient and load the config file for that patient. Config file contains paths to imaging files + ordering of samples + sample names + colors
patientID <- 'Patient303'
sf <- "sf10809"
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
modelsPath <- paste0(dataPath, '/3Dmodels/',sf,'/',patientID)
source('/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Publications/Hilz2018_IDHSpatioTemporal/Scripts/3DGliomaAnalysis/scripts/studyConfig.R')
modelsPath <- paste0(dataPath, '/3Dmodels/',sf,'/',patientID)
modelsPath
dir(modelsPath)
modelsPath <- paste0(dataPath, '/3Dmodels/',patientID,'/',sf)
dir(modelsPath)
list(modelsPath)
list.files(modelsPath)
# Bring in sample models for patient
sampleModels <- mixedsort(list.files(modelsPath))#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
sampleModels
?list.files
# Bring in sample models for patient
sampleModels <- mixedsort(list.files(modelsPath, pattern="sample*"))#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
sampleModels
# Bring in tumor model for patient
tumorModel <- paste0(modelsPath, '/tumor_t2.rds')
tumorModel
plotTemplate <- function(pathBrainDicoms, tumorModel,showBrain=FALSE){#currently have disabled brain display
if (showBrain==TRUE){
print(paste('Processing ',pathBrainDicoms,sep=''))
brainTemplate <- readDICOM(pathBrainDicoms, recursive = FALSE, exclude = NULL, verbose = TRUE)
brainTemplate <- dicom2nifti(brainTemplate,datatype=4, mode="integer")
brainTemplate@.Data <- correctOrientation(brainTemplate@.Data)
dtemp <- dim(brainTemplate)
print('Creating brain contour and plotting brain.')
brainTemplate[brainTemplate<1000] = 0
brainTemplate[brainTemplate>=1000] = 1
brain <- contour3d(brainTemplate, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = .05, color='grey', draw = TRUE)
print(paste('Processing ', tumorModel, sep=''))
tumorTemplate <- readDICOM(tumorModel, recursive = TRUE, exclude = NULL, verbose = TRUE)
tumorTemplate <- dicom2nifti(tumorTemplate,datatype=4, mode="integer")
tumorTemplate@.Data <- correctOrientation(tumorTemplate@.Data)
print('Creating tumor contour and plotting tumor')
tumor <- contour3d(tumorTemplate, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = tumorTemplate@cal_max, alpha = .2, add = TRUE, draw = TRUE, color = 'yellow')
} else {
print(paste('Processing ', tumorModel, sep=''))
dtemp <- dim(tumorModel)
print('Creating tumor contour and plotting tumor')
tumor <- contour3d(tumorModel, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = .2, add = FALSE, draw = TRUE, color = 'yellow')
}
}
definePeriph <- function(tumorModel){
print(paste('Processing ', tumorModel, sep=''))
tumorMaskPositive <- max(tumorModel)
peripheryMask <- tumorModel
peripheryMask[which(peripheryMask <= tumorMaskPositive)] <- 0
peripheryXYZ <- c()
for (z in 1:dim(tumorNifti)[3]){
for (y in 1:dim(tumorNifti)[2]){
for (x in 1:dim(tumorNifti)[1]){
if (tumorNifti[x,y,z] == tumorMaskPositive){
if (tumorNifti[x+1,y,z] == 0 ||
tumorNifti[x-1,y,z] == 0 ||
tumorNifti[x,y+1,z] == 0 ||
tumorNifti[x,y-1,z] == 0 ||
tumorNifti[x,y,z+1] == 0 ||
tumorNifti[x,y,z-1] == 0){
peripheryXYZ <- rbind(peripheryXYZ, c(x,y,z))
peripheryMask[x,y,z] <- 1
}
}
}
}
}
peripheryXYZ <- as.data.frame(peripheryXYZ)
colnames(peripheryXYZ) <- c('x','y','z')
output <- list('XYZ' = peripheryXYZ, 'mask' = peripheryMask )
return(output)
}
plot3dSamples <- function(sampleModels, colors, names=NULL){
for (i in 1:length(sampleModels)){
x <- sampleModels[i]
print(paste('Processing ',x,sep=''))
splitname <- strsplit(x,'/') %>% unlist
name <- splitname[length(splitname)]
name <- strsplit(name,'\\.')[1] %>% unlist
dtemp <- dim(x)
sample <- contour3d(x, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = 1, color=colors[i], add = TRUE, draw = TRUE)
text3d(which(x == 1, arr.ind=TRUE)[1,], texts = name, cex=1, adj=-.3)
}
}
plotTemplate <- function(pathBrainDicoms, tumorModel,showBrain=FALSE){#currently have disabled brain display
if (showBrain==TRUE){
print(paste('Processing ',pathBrainDicoms,sep=''))
brainTemplate <- readDICOM(pathBrainDicoms, recursive = FALSE, exclude = NULL, verbose = TRUE)
brainTemplate <- dicom2nifti(brainTemplate,datatype=4, mode="integer")
brainTemplate@.Data <- correctOrientation(brainTemplate@.Data)
dtemp <- dim(brainTemplate)
print('Creating brain contour and plotting brain.')
brainTemplate[brainTemplate<1000] = 0
brainTemplate[brainTemplate>=1000] = 1
brain <- contour3d(brainTemplate, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = .05, color='grey', draw = TRUE)
print(paste('Processing ', tumorModel, sep=''))
tumorTemplate <- readDICOM(tumorModel, recursive = TRUE, exclude = NULL, verbose = TRUE)
tumorTemplate <- dicom2nifti(tumorTemplate,datatype=4, mode="integer")
tumorTemplate@.Data <- correctOrientation(tumorTemplate@.Data)
print('Creating tumor contour and plotting tumor')
tumor <- contour3d(tumorTemplate, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = tumorTemplate@cal_max, alpha = .2, add = TRUE, draw = TRUE, color = 'yellow')
} else {
print(paste('Processing ', tumorModel, sep=''))
dtemp <- dim(tumorModel)
print('Creating tumor contour and plotting tumor')
tumor <- contour3d(tumorModel, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = .2, add = FALSE, draw = TRUE, color = 'yellow')
}
}
definePeriph <- function(tumorModel){
print(paste('Processing ', tumorModel, sep=''))
tumorMaskPositive <- max(tumorModel)
peripheryMask <- tumorModel
peripheryMask[which(peripheryMask <= tumorMaskPositive)] <- 0
peripheryXYZ <- c()
for (z in 1:dim(tumorNifti)[3]){
for (y in 1:dim(tumorNifti)[2]){
for (x in 1:dim(tumorNifti)[1]){
if (tumorNifti[x,y,z] == tumorMaskPositive){
if (tumorNifti[x+1,y,z] == 0 ||
tumorNifti[x-1,y,z] == 0 ||
tumorNifti[x,y+1,z] == 0 ||
tumorNifti[x,y-1,z] == 0 ||
tumorNifti[x,y,z+1] == 0 ||
tumorNifti[x,y,z-1] == 0){
peripheryXYZ <- rbind(peripheryXYZ, c(x,y,z))
peripheryMask[x,y,z] <- 1
}
}
}
}
}
peripheryXYZ <- as.data.frame(peripheryXYZ)
colnames(peripheryXYZ) <- c('x','y','z')
output <- list('XYZ' = peripheryXYZ, 'mask' = peripheryMask )
return(output)
}
plot3dSamples <- function(sampleModels, colors, names=NULL){
for (i in 1:length(sampleModels)){
x <- sampleModels[i]
print(paste('Processing ',x,sep=''))
splitname <- strsplit(x,'/') %>% unlist
name <- splitname[length(splitname)]
name <- strsplit(name,'\\.')[1] %>% unlist
dtemp <- dim(x)
sample <- contour3d(x, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = 1, color=colors[i], add = TRUE, draw = TRUE)
text3d(which(x == 1, arr.ind=TRUE)[1,], texts = name, cex=1, adj=-.3)
}
}
# Bring in sample models for patient
sampleModels <- mixedsort(list.files(modelsPath, pattern="sample*"))#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Bring in tumor model for patient
tumorModel <- paste0(modelsPath, '/tumor_t2.rds')
# Plot background of brain and tumor
plotTemplate(tumorModel,tumorModel)
print(paste('Processing ', tumorModel, sep=''))
dtemp <- dim(tumorModel)
dtemp
tumorModel
# Bring in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# Plot background of brain and tumor
plotTemplate(tumorModel,tumorModel)
# Bring in sample models for patient
sampleModels <- lapply(mixedsort(list.files(modelsPath, pattern="sample*")), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
mixedsort(list.files(modelsPath, pattern="sample*"))
# Bring in sample models for patient
sampleModels <- sapply(mixedsort(list.files(modelsPath, pattern="sample*")), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Bring in sample models for patient
sampleModels <- sapply(paste0(dataPath, mixedsort(list.files(modelsPath, pattern="sample*"))), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
paste0(dataPath, mixedsort(list.files(modelsPath, pattern="sample*")))
# Bring in sample models for patient
sampleModels <- sapply(paste0(modelsPath, mixedsort(list.files(modelsPath, pattern="sample*"))), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
paste0(modelsPath, mixedsort(list.files(modelsPath, pattern="sample*")))
paste0(modelsPath, '/', mixedsort(list.files(modelsPath, pattern="sample*")))
d <- paste0(modelsPath, '/', mixedsort(list.files(modelsPath, pattern="sample*")))[1]
readRDS(d)
# Bring in sample models for patient
sampleModels <- sapply(paste0(modelsPath, '/', mixedsort(list.files(modelsPath, pattern="sample*"))), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
str(sampleModels)
sampleModels[1]
sampleModels[[1]]
dim(sampleModels)
# Bring in sample models for patient
sampleModels <- lapply(paste0(modelsPath, '/', mixedsort(list.files(modelsPath, pattern="sample*"))), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
str(sampleModels)
# Bring in sample models for patient
sampleModelFiles <- mixedsort(list.files(modelsPath, pattern="sample*"))
sampleModelFiles
# Create names object
names <- gsub('sample','',sampleModelFiles)
names
# Create names object
names <- gsub('.rds','',gsub('sample','',sampleModelFiles))
names
# Read in sample models
sampleModels <- lapply(paste0(modelsPath, '/', sampleModelFiles), readRDS)#this should be a list of all subdirectories in the main sample dir, each containing dicoms for a single data point
# Name
names(sampleModels) <- names
str(sampleModels)
# Read in tumor model for patient
tumorModel <- readRDS(paste0(modelsPath, '/tumor_t2.rds'))
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
plotTemplate <- function(tumorModel){
print(paste('Processing ', tumorModel, sep=''))
dtemp <- dim(tumorModel)
print('Creating tumor contour and plotting tumor')
tumor <- contour3d(tumorModel, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = .2, add = FALSE, draw = TRUE, color = 'yellow')
}
}
plotTemplate <- function(tumorModel){
print(paste('Processing ', tumorModel, sep=''))
dtemp <- dim(tumorModel)
print('Creating tumor contour and plotting tumor')
tumor <- contour3d(tumorModel, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = .2, add = FALSE, draw = TRUE, color = 'yellow')
}
definePeriph <- function(tumorModel){
print(paste('Processing ', tumorModel, sep=''))
tumorMaskPositive <- max(tumorModel)
peripheryMask <- tumorModel
peripheryMask[which(peripheryMask <= tumorMaskPositive)] <- 0
peripheryXYZ <- c()
for (z in 1:dim(tumorModel)[3]){
for (y in 1:dim(tumorModel)[2]){
for (x in 1:dim(tumorModel)[1]){
if (tumorModel[x,y,z] == tumorMaskPositive){
if (tumorModel[x+1,y,z] == 0 ||
tumorModel[x-1,y,z] == 0 ||
tumorModel[x,y+1,z] == 0 ||
tumorModel[x,y-1,z] == 0 ||
tumorModel[x,y,z+1] == 0 ||
tumorModel[x,y,z-1] == 0){
peripheryXYZ <- rbind(peripheryXYZ, c(x,y,z))
peripheryMask[x,y,z] <- 1
}
}
}
}
}
peripheryXYZ <- as.data.frame(peripheryXYZ)
colnames(peripheryXYZ) <- c('x','y','z')
output <- list('XYZ' = peripheryXYZ, 'mask' = peripheryMask )
return(output)
}
length(sampleModels)
i <- 1
sampleModels[i]
x <- sampleModels[i]
print(paste('Processing ',x,sep=''))
name <- names(sampleModels)[i]
)
}
x <- sampleModels[i]
print(paste0('Processing sample ',i))
print(paste0('Processing sample',i))
name <- names(sampleModels)[i]
name
dtemp <- dim(x)
sample <- contour3d(x, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = 1, color=colors[i], add = TRUE, draw = TRUE)
dim(x)
x <- sampleModels[i]
x
name <- names(sampleModels)[1]
x <- sampleModels[[s]]
print(paste0('Processing sample',i))
print(paste0('Processing sample',name))
dtemp <- dim(x)
dtemp
x <- sampleModels[[name]]
x <- sampleModels[[name]]
print(paste0('Processing sample',name))
dtemp <- dim(x)
dtemp
sample <- contour3d(x, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = 1, color=colors[i], add = TRUE, draw = TRUE)
text3d(which(x == 1, arr.ind=TRUE)[1,], texts = name, cex=1, adj=-.3)
plot3dSamples <- function(sampleModels, colors){
for (name in names(sampleModels)){
x <- sampleModels[[name]]
print(paste0('Processing sample',name))
dtemp <- dim(x)
sample <- contour3d(x, x=1:dtemp[1], y=1:dtemp[2], z=1:dtemp[3], level = 1, alpha = 1, color=colors[i], add = TRUE, draw = TRUE)
text3d(which(x == 1, arr.ind=TRUE)[1,], texts = name, cex=1, adj=-.3)
}
}
# Set up default colors
colors <- rep(length(sampleModels),'blue')
# Set up default colors
colors <- rep('blue', length(sampleModels))
colors
# Plot samples
plot3dSamples(sampleModels, colors)
adj
calcSampleCenters <- function(orderedSubdirectories){
sampleCenteredXYZ <- c()
for (name in names(sampleModels)){
x <- sampleModels[[name]]
print(paste0('Processing sample',name))
sampleXYZ <- which(x==1, arr.ind=TRUE)
sampleCenteredX <- max(sampleXYZ[,1])-((max(sampleXYZ[,1])-min(sampleXYZ[,1]))/2)
sampleCenteredY <- max(sampleXYZ[,2])-((max(sampleXYZ[,2])-min(sampleXYZ[,2]))/2)
sampleCenteredZ <- max(sampleXYZ[,3])-((max(sampleXYZ[,3])-min(sampleXYZ[,3]))/2)
sampleCenteredXYZ <- rbind(sampleCenteredXYZ, c(sampleCenteredX,sampleCenteredY,sampleCenteredZ))
}
return(sampleCenteredXYZ)
}
calcSampleCenters <- function(sampleModels){
sampleCenteredXYZ <- c()
for (name in names(sampleModels)){
x <- sampleModels[[name]]
print(paste0('Processing sample',name))
sampleXYZ <- which(x==1, arr.ind=TRUE)
sampleCenteredX <- max(sampleXYZ[,1])-((max(sampleXYZ[,1])-min(sampleXYZ[,1]))/2)
sampleCenteredY <- max(sampleXYZ[,2])-((max(sampleXYZ[,2])-min(sampleXYZ[,2]))/2)
sampleCenteredZ <- max(sampleXYZ[,3])-((max(sampleXYZ[,3])-min(sampleXYZ[,3]))/2)
sampleCenteredXYZ <- rbind(sampleCenteredXYZ, c(sampleCenteredX,sampleCenteredY,sampleCenteredZ))
}
return(sampleCenteredXYZ)
}
# Extract centered sample coordinates
sampleCenters <- calcSampleCenters(sampleModels)
sampleCenters
# Calc sample pairwise distances - used only to check, should always use official coordinates
samplePairwiseDistances <- calcSamplePairwiseDistances(sampleCenters, adj)
samplePairwiseDistances
# Calculate avg distance from periphery
print(mean(samplePairwiseDistances))
tumorPeriphery$XYZ
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
definePeriph <- function(tumorModel){
print(paste('Processing ', tumorModel, sep=''))
tumorMaskPositive <- max(tumorModel)
peripheryMask <- tumorModel
peripheryMask[which(peripheryMask <= tumorMaskPositive)] <- 0
peripheryXYZ <- c()
for (z in 1:dim(tumorModel)[3]){
for (y in 1:dim(tumorModel)[2]){
for (x in 1:dim(tumorModel)[1]){
if (tumorModel[x,y,z] == tumorMaskPositive){
if (tumorModel[x+1,y,z] == 0 ||
tumorModel[x-1,y,z] == 0 ||
tumorModel[x,y+1,z] == 0 ||
tumorModel[x,y-1,z] == 0 ||
tumorModel[x,y,z+1] == 0 ||
tumorModel[x,y,z-1] == 0){
peripheryXYZ <- rbind(peripheryXYZ, c(x,y,z))
peripheryMask[x,y,z] <- 1
}
}
}
}
}
peripheryXYZ <- as.data.frame(peripheryXYZ)
colnames(peripheryXYZ) <- c('x','y','z')
output <- list('XYZ' = peripheryXYZ, 'mask' = peripheryMask )
return(output)
}
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
tumorMaskPositive <- max(tumorModel)
peripheryMask <- tumorModel
peripheryMask[which(peripheryMask <= tumorMaskPositive)] <- 0
tumorMaskPositive
1:dim(tumorModel)
dim(tumorModel)[3]
tumorMaskPositive <- max(tumorModel)
peripheryMask <- tumorModel
peripheryMask[which(peripheryMask <= tumorMaskPositive)] <- 0
peripheryXYZ <- c()
for (z in 1:dim(tumorModel)[3]){
for (y in 1:dim(tumorModel)[2]){
for (x in 1:dim(tumorModel)[1]){
if (tumorModel[x,y,z] == tumorMaskPositive){
if (tumorModel[x+1,y,z] == 0 ||
tumorModel[x-1,y,z] == 0 ||
tumorModel[x,y+1,z] == 0 ||
tumorModel[x,y-1,z] == 0 ||
tumorModel[x,y,z+1] == 0 ||
tumorModel[x,y,z-1] == 0){
peripheryXYZ <- rbind(peripheryXYZ, c(x,y,z))
peripheryMask[x,y,z] <- 1
}
}
}
}
}
peripheryXYZ <- as.data.frame(peripheryXYZ)
colnames(peripheryXYZ) <- c('x','y','z')
output <- list('XYZ' = peripheryXYZ, 'mask' = peripheryMask )
dim(output)
dim(peripheryXYZ)
colnames(peripheryXYZ)
dim(peripheryMask)
head(peripheryXYZ)
output <- list('XYZ' = peripheryXYZ, 'mask' = peripheryMask )
names(output)
head(output$XYZ)
definePeriph <- function(tumorModel){
tumorMaskPositive <- max(tumorModel)
peripheryMask <- tumorModel
peripheryMask[which(peripheryMask <= tumorMaskPositive)] <- 0
peripheryXYZ <- c()
for (z in 1:dim(tumorModel)[3]){
for (y in 1:dim(tumorModel)[2]){
for (x in 1:dim(tumorModel)[1]){
if (tumorModel[x,y,z] == tumorMaskPositive){
if (tumorModel[x+1,y,z] == 0 ||
tumorModel[x-1,y,z] == 0 ||
tumorModel[x,y+1,z] == 0 ||
tumorModel[x,y-1,z] == 0 ||
tumorModel[x,y,z+1] == 0 ||
tumorModel[x,y,z-1] == 0){
peripheryXYZ <- rbind(peripheryXYZ, c(x,y,z))
peripheryMask[x,y,z] <- 1
}
}
}
}
}
peripheryXYZ <- as.data.frame(peripheryXYZ)
colnames(peripheryXYZ) <- c('x','y','z')
output <- list('XYZ' = peripheryXYZ, 'mask' = peripheryMask )
return(output)
}
# Define periphery
tumorPeriphery <- definePeriph(tumorModel)
# Calc min distance
minDistances <- calcMinDistances(sampleCenters, tumorPeriphery$XYZ, adj)
# User-defined variables (2 input parts)
metadataFile <- '20190201_sample_input.txt'
falconxdir <- '/Users/shilz/Documents/Professional/Positions/UCSF_Costello/Projects/2016_LoglioExomeAnalysis/Analysis_and_Results/falconx/real_data/'
runtag <- '20190201_run'
